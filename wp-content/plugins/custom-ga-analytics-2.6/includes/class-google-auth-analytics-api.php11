<?php
class Google_Auth_Analytics {
 
    protected $loader;
 
    protected $plugin_slug;
 
    protected $version;
 
    public function __construct() {
		if($cgaDashSetting != '')
			$cgaDashSetting = maybe_unserialize(base64_decode($cgaDashSetting));
		$redirectURL = get_permalink($cgaDashSetting['setting']['loginPage']);
        require_once realpath(CGA_PLUGIN_BASEPATH . '/tools/src/Google/autoload.php');
		$this->client_id = '503203966289-a9i272p88upaodnspruelks6kr1s41dt.apps.googleusercontent.com';
		$this->client_secret = 'AgEpYPu2PPGUBSlO_rG2tMhh';
		$this->redirect_uri = $redirectURL;
		$this->homeUrl = $redirectURL;
		$this->gClient = new Google_Client();
		$this->gClient->setClientId($this->client_id);
		$this->gClient->setClientSecret($this->client_secret);
		$this->gClient->setRedirectUri($this->redirect_uri);
		$this->gClient->setScopes(array(
			'https://www.googleapis.com/auth/userinfo.email',
			'https://www.googleapis.com/auth/userinfo.profile',
			'https://www.googleapis.com/auth/analytics',
			'https://www.googleapis.com/auth/analytics.provision'
		));
    }
    
    public function authenticate() {
		
    }
    
    public function auth_url() {
		return $this->gClient->createAuthUrl();
    }
    
    public function check_access_code() {
		if($_REQUEST['code']){
			if (session_status() == PHP_SESSION_NONE) {
				@session_start();
			}
			$this->gClient->authenticate($_REQUEST['code']);
			$_SESSION['CGA_sessionData']['token'] = $this->gClient->getAccessToken();
			$cgaDashSetting = get_option('cga_dashSetting');
			if($cgaDashSetting != '')
				$cgaDashSetting = maybe_unserialize(base64_decode($cgaDashSetting));
			$redirectURL = get_permalink($cgaDashSetting['setting']['goalCyclePage']);
			echo '<script>window.location.href="'.$redirectURL.'"</script>';
			wp_redirect($redirectURL);
			exit();
		}
    }
    
    public function isAccessTokenExpired() {
		If(isset($_SESSION['CGA_sessionData'])){
			$accessData = json_decode($_SESSION['CGA_sessionData']['token']);
			$expiresOn = $accessData->created + $accessData->expires_in;
			if($expiresOn > time())
				return false;
			else
				return true;
		}else{
			return true;
		}
    }
    
    public function getClientObject() {
		return $this->gClient;
    }
    
    public function getAnalyticAccounts() {
		$analytics = new Google_Service_Analytics($this->gClient);
		$accessData = json_decode($_SESSION['CGA_sessionData']['token']);
		$accounts = $analytics->management_accounts->listManagementAccounts();
		$allAccounts = array();
		if (count($accounts->getItems()) > 0) {
			$items = $accounts->getItems();
			foreach($items as $item){
				$allAccounts[] = array(
					'id'		=>	$item->id,
					'name'		=>	$item->name,
					'selfLink'	=>	$item->selfLink
				);
			}
		
		}
		return $allAccounts;
    }
    
    public function getListProperties($accountID) {
		$analytics = new Google_Service_Analytics($this->gClient);
		$properties = $analytics->management_webproperties->listManagementWebproperties($accountID);
		if (count($properties->getItems()) > 0) {
			$items = $properties->getItems();


		}
		$allProperties = array();
		if (count($properties->getItems()) > 0) {
			$items = $properties->getItems();
			foreach($items as $item){
				$allProperties[] = array(
					'id'			=>	$item->id,
					'name'			=>	$item->name,
					'selfLink'		=>	$item->selfLink,
					'accountId'		=>	$item->accountId,
					'websiteUrl'	=>	$item->websiteUrl,
				);
			}
		}
		return $allProperties;
	}
	
    public function getPropertyViews($accountID, $propertyID) {
		$analytics = new Google_Service_Analytics($this->gClient);
		$profiles = $analytics->management_profiles->listManagementProfiles($accountID, $propertyID);
		if (count($profiles->getItems()) > 0) {
			$items = $profiles->getItems();
			$results = $this->getResults($analytics, $items[0]->getId());
			$this->printResults($results);
		} else {
			throw new Exception('No views (profiles) found for this user.');
		}
	}
	
	function getResults(&$analytics, $profileId) {
	  // Calls the Core Reporting API and queries for the number of sessions
	  // for the last seven days.
	   return $analytics->data_ga->get(
		   'ga:' . $profileId,
		   '7daysAgo',
		   'today',
		   'ga:sessions');
	}
	function printResults(&$results) {
		// Parses the response from the Core Reporting API and prints
		// the profile name and total sessions.
		if (count($results->getRows()) > 0) {

			// Get the profile name.
			$profileName = $results->getProfileInfo()->getProfileName();

			// Get the entry for the first entry in the first row.
			$rows = $results->getRows();
			$sessions = $rows[0][0];

			// Print the results.
			print "First view (profile) found: $profileName\n <br />";
			print "Total sessions: $sessions\n  <br />";
		} else {
			print "No results found.\n";
		}
	}

 
}
